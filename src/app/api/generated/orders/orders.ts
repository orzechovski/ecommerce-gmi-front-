/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * E-commerce GMI API
 * API documentation for the E-commerce gmi project
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  CreateOrderDto
} from '../eCommerceGMIAPI.schemas'
import { customInstance } from '../../_mutator/axios-instance';
import type { ErrorType } from '../../_mutator/axios-instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Retrieve all orders
 */
export const ordersControllerFindAll = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/orders`, method: 'GET', signal
    },
      options);
    }
  

export const getOrdersControllerFindAllQueryKey = () => {
    return [`/api/orders`] as const;
    }

    
export const getOrdersControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof ordersControllerFindAll>>, TError = ErrorType<void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ordersControllerFindAll>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrdersControllerFindAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof ordersControllerFindAll>>> = ({ signal }) => ordersControllerFindAll(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof ordersControllerFindAll>>, TError, TData> & { queryKey: QueryKey }
}

export type OrdersControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof ordersControllerFindAll>>>
export type OrdersControllerFindAllQueryError = ErrorType<void>


export function useOrdersControllerFindAll<TData = Awaited<ReturnType<typeof ordersControllerFindAll>>, TError = ErrorType<void>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof ordersControllerFindAll>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ordersControllerFindAll>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useOrdersControllerFindAll<TData = Awaited<ReturnType<typeof ordersControllerFindAll>>, TError = ErrorType<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ordersControllerFindAll>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ordersControllerFindAll>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useOrdersControllerFindAll<TData = Awaited<ReturnType<typeof ordersControllerFindAll>>, TError = ErrorType<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ordersControllerFindAll>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Retrieve all orders
 */

export function useOrdersControllerFindAll<TData = Awaited<ReturnType<typeof ordersControllerFindAll>>, TError = ErrorType<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ordersControllerFindAll>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getOrdersControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new order from customer cart
 */
export const ordersControllerCreateOrder = (
    createOrderDto: CreateOrderDto,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/orders`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createOrderDto
    },
      options);
    }
  


export const getOrdersControllerCreateOrderMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerCreateOrder>>, TError,{data: CreateOrderDto}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof ordersControllerCreateOrder>>, TError,{data: CreateOrderDto}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ordersControllerCreateOrder>>, {data: CreateOrderDto}> = (props) => {
          const {data} = props ?? {};

          return  ordersControllerCreateOrder(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrdersControllerCreateOrderMutationResult = NonNullable<Awaited<ReturnType<typeof ordersControllerCreateOrder>>>
    export type OrdersControllerCreateOrderMutationBody = CreateOrderDto
    export type OrdersControllerCreateOrderMutationError = ErrorType<void>

    /**
 * @summary Create a new order from customer cart
 */
export const useOrdersControllerCreateOrder = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerCreateOrder>>, TError,{data: CreateOrderDto}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof ordersControllerCreateOrder>>,
        TError,
        {data: CreateOrderDto},
        TContext
      > => {

      const mutationOptions = getOrdersControllerCreateOrderMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Retrieve orders for a specific customer
 */
export const ordersControllerGetOrders = (
    id: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/orders/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getOrdersControllerGetOrdersQueryKey = (id: string,) => {
    return [`/api/orders/${id}`] as const;
    }

    
export const getOrdersControllerGetOrdersQueryOptions = <TData = Awaited<ReturnType<typeof ordersControllerGetOrders>>, TError = ErrorType<void>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ordersControllerGetOrders>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrdersControllerGetOrdersQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof ordersControllerGetOrders>>> = ({ signal }) => ordersControllerGetOrders(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof ordersControllerGetOrders>>, TError, TData> & { queryKey: QueryKey }
}

export type OrdersControllerGetOrdersQueryResult = NonNullable<Awaited<ReturnType<typeof ordersControllerGetOrders>>>
export type OrdersControllerGetOrdersQueryError = ErrorType<void>


export function useOrdersControllerGetOrders<TData = Awaited<ReturnType<typeof ordersControllerGetOrders>>, TError = ErrorType<void>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof ordersControllerGetOrders>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof ordersControllerGetOrders>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useOrdersControllerGetOrders<TData = Awaited<ReturnType<typeof ordersControllerGetOrders>>, TError = ErrorType<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ordersControllerGetOrders>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof ordersControllerGetOrders>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useOrdersControllerGetOrders<TData = Awaited<ReturnType<typeof ordersControllerGetOrders>>, TError = ErrorType<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ordersControllerGetOrders>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Retrieve orders for a specific customer
 */

export function useOrdersControllerGetOrders<TData = Awaited<ReturnType<typeof ordersControllerGetOrders>>, TError = ErrorType<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof ordersControllerGetOrders>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getOrdersControllerGetOrdersQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Delete an order by ID
 */
export const ordersControllerDeleteOrder = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/orders/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getOrdersControllerDeleteOrderMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerDeleteOrder>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof ordersControllerDeleteOrder>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ordersControllerDeleteOrder>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  ordersControllerDeleteOrder(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrdersControllerDeleteOrderMutationResult = NonNullable<Awaited<ReturnType<typeof ordersControllerDeleteOrder>>>
    
    export type OrdersControllerDeleteOrderMutationError = ErrorType<void>

    /**
 * @summary Delete an order by ID
 */
export const useOrdersControllerDeleteOrder = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ordersControllerDeleteOrder>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof ordersControllerDeleteOrder>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getOrdersControllerDeleteOrderMutationOptions(options);

      return useMutation(mutationOptions);
    }
    