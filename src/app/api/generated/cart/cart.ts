/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * E-commerce GMI API
 * API documentation for the E-commerce gmi project
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  AddToCartDto,
  CartDto,
  RemoveFromCartDto
} from '../eCommerceGMIAPI.schemas'
import { customInstance } from '../../_mutator/axios-instance';
import type { ErrorType } from '../../_mutator/axios-instance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Add product to cart
 */
export const cartControllerAddToCart = (
    addToCartDto: AddToCartDto,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/cart/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: addToCartDto
    },
      options);
    }
  


export const getCartControllerAddToCartMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cartControllerAddToCart>>, TError,{data: AddToCartDto}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof cartControllerAddToCart>>, TError,{data: AddToCartDto}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof cartControllerAddToCart>>, {data: AddToCartDto}> = (props) => {
          const {data} = props ?? {};

          return  cartControllerAddToCart(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CartControllerAddToCartMutationResult = NonNullable<Awaited<ReturnType<typeof cartControllerAddToCart>>>
    export type CartControllerAddToCartMutationBody = AddToCartDto
    export type CartControllerAddToCartMutationError = ErrorType<void>

    /**
 * @summary Add product to cart
 */
export const useCartControllerAddToCart = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cartControllerAddToCart>>, TError,{data: AddToCartDto}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof cartControllerAddToCart>>,
        TError,
        {data: AddToCartDto},
        TContext
      > => {

      const mutationOptions = getCartControllerAddToCartMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Remove product from cart
 */
export const cartControllerRemoveFromCart = (
    removeFromCartDto: RemoveFromCartDto,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/cart/remove`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: removeFromCartDto
    },
      options);
    }
  


export const getCartControllerRemoveFromCartMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cartControllerRemoveFromCart>>, TError,{data: RemoveFromCartDto}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof cartControllerRemoveFromCart>>, TError,{data: RemoveFromCartDto}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof cartControllerRemoveFromCart>>, {data: RemoveFromCartDto}> = (props) => {
          const {data} = props ?? {};

          return  cartControllerRemoveFromCart(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CartControllerRemoveFromCartMutationResult = NonNullable<Awaited<ReturnType<typeof cartControllerRemoveFromCart>>>
    export type CartControllerRemoveFromCartMutationBody = RemoveFromCartDto
    export type CartControllerRemoveFromCartMutationError = ErrorType<void>

    /**
 * @summary Remove product from cart
 */
export const useCartControllerRemoveFromCart = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cartControllerRemoveFromCart>>, TError,{data: RemoveFromCartDto}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof cartControllerRemoveFromCart>>,
        TError,
        {data: RemoveFromCartDto},
        TContext
      > => {

      const mutationOptions = getCartControllerRemoveFromCartMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get cart for customer
 */
export const cartControllerGetCart = (
    customerId: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CartDto>(
      {url: `/api/cart/${customerId}`, method: 'GET', signal
    },
      options);
    }
  

export const getCartControllerGetCartQueryKey = (customerId: string,) => {
    return [`/api/cart/${customerId}`] as const;
    }

    
export const getCartControllerGetCartQueryOptions = <TData = Awaited<ReturnType<typeof cartControllerGetCart>>, TError = ErrorType<void>>(customerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof cartControllerGetCart>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCartControllerGetCartQueryKey(customerId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof cartControllerGetCart>>> = ({ signal }) => cartControllerGetCart(customerId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(customerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof cartControllerGetCart>>, TError, TData> & { queryKey: QueryKey }
}

export type CartControllerGetCartQueryResult = NonNullable<Awaited<ReturnType<typeof cartControllerGetCart>>>
export type CartControllerGetCartQueryError = ErrorType<void>


export function useCartControllerGetCart<TData = Awaited<ReturnType<typeof cartControllerGetCart>>, TError = ErrorType<void>>(
 customerId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof cartControllerGetCart>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof cartControllerGetCart>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useCartControllerGetCart<TData = Awaited<ReturnType<typeof cartControllerGetCart>>, TError = ErrorType<void>>(
 customerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof cartControllerGetCart>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof cartControllerGetCart>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useCartControllerGetCart<TData = Awaited<ReturnType<typeof cartControllerGetCart>>, TError = ErrorType<void>>(
 customerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof cartControllerGetCart>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get cart for customer
 */

export function useCartControllerGetCart<TData = Awaited<ReturnType<typeof cartControllerGetCart>>, TError = ErrorType<void>>(
 customerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof cartControllerGetCart>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getCartControllerGetCartQueryOptions(customerId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



